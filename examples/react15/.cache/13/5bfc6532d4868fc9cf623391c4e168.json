{"id":"node_modules/draft-js/lib/editOnBeforeInput.js","dependencies":[{"name":"/Users/eason/Desktop/micro-frontend/test/examples/react15/package.json","includedInParent":true,"mtime":1565259114444},{"name":"/Users/eason/Desktop/micro-frontend/test/examples/react15/node_modules/draft-js/package.json","includedInParent":true,"mtime":1565313460061},{"name":"./BlockTree","loc":{"line":16,"column":24},"parent":"/Users/eason/Desktop/micro-frontend/test/examples/react15/node_modules/draft-js/lib/editOnBeforeInput.js","resolved":"/Users/eason/Desktop/micro-frontend/test/examples/react15/node_modules/draft-js/lib/BlockTree.js"},{"name":"./DraftModifier","loc":{"line":17,"column":28},"parent":"/Users/eason/Desktop/micro-frontend/test/examples/react15/node_modules/draft-js/lib/editOnBeforeInput.js","resolved":"/Users/eason/Desktop/micro-frontend/test/examples/react15/node_modules/draft-js/lib/DraftModifier.js"},{"name":"./EditorState","loc":{"line":18,"column":26},"parent":"/Users/eason/Desktop/micro-frontend/test/examples/react15/node_modules/draft-js/lib/editOnBeforeInput.js","resolved":"/Users/eason/Desktop/micro-frontend/test/examples/react15/node_modules/draft-js/lib/EditorState.js"},{"name":"fbjs/lib/UserAgent","loc":{"line":19,"column":24},"parent":"/Users/eason/Desktop/micro-frontend/test/examples/react15/node_modules/draft-js/lib/editOnBeforeInput.js","resolved":"/Users/eason/Desktop/micro-frontend/test/examples/react15/node_modules/fbjs/lib/UserAgent.js"},{"name":"./getEntityKeyForSelection","loc":{"line":21,"column":39},"parent":"/Users/eason/Desktop/micro-frontend/test/examples/react15/node_modules/draft-js/lib/editOnBeforeInput.js","resolved":"/Users/eason/Desktop/micro-frontend/test/examples/react15/node_modules/draft-js/lib/getEntityKeyForSelection.js"},{"name":"./isEventHandled","loc":{"line":22,"column":29},"parent":"/Users/eason/Desktop/micro-frontend/test/examples/react15/node_modules/draft-js/lib/editOnBeforeInput.js","resolved":"/Users/eason/Desktop/micro-frontend/test/examples/react15/node_modules/draft-js/lib/isEventHandled.js"},{"name":"./isSelectionAtLeafStart","loc":{"line":23,"column":37},"parent":"/Users/eason/Desktop/micro-frontend/test/examples/react15/node_modules/draft-js/lib/editOnBeforeInput.js","resolved":"/Users/eason/Desktop/micro-frontend/test/examples/react15/node_modules/draft-js/lib/isSelectionAtLeafStart.js"},{"name":"fbjs/lib/nullthrows","loc":{"line":24,"column":25},"parent":"/Users/eason/Desktop/micro-frontend/test/examples/react15/node_modules/draft-js/lib/editOnBeforeInput.js","resolved":"/Users/eason/Desktop/micro-frontend/test/examples/react15/node_modules/fbjs/lib/nullthrows.js"},{"name":"fbjs/lib/setImmediate","loc":{"line":25,"column":27},"parent":"/Users/eason/Desktop/micro-frontend/test/examples/react15/node_modules/draft-js/lib/editOnBeforeInput.js","resolved":"/Users/eason/Desktop/micro-frontend/test/examples/react15/node_modules/fbjs/lib/setImmediate.js"}],"generated":{"js":"var global = arguments[3];\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnBeforeInput\n * @format\n * \n */\n\n'use strict';\n\nvar BlockTree = require('./BlockTree');\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\nvar UserAgent = require('fbjs/lib/UserAgent');\n\nvar getEntityKeyForSelection = require('./getEntityKeyForSelection');\nvar isEventHandled = require('./isEventHandled');\nvar isSelectionAtLeafStart = require('./isSelectionAtLeafStart');\nvar nullthrows = require('fbjs/lib/nullthrows');\nvar setImmediate = require('fbjs/lib/setImmediate');\n\n// When nothing is focused, Firefox regards two characters, `'` and `/`, as\n// commands that should open and focus the \"quickfind\" search bar. This should\n// *never* happen while a contenteditable is focused, but as of v28, it\n// sometimes does, even when the keypress event target is the contenteditable.\n// This breaks the input. Special case these characters to ensure that when\n// they are typed, we prevent default on the event to make sure not to\n// trigger quickfind.\nvar FF_QUICKFIND_CHAR = \"'\";\nvar FF_QUICKFIND_LINK_CHAR = '/';\nvar isFirefox = UserAgent.isBrowser('Firefox');\n\nfunction mustPreventDefaultForCharacter(character) {\n  return isFirefox && (character == FF_QUICKFIND_CHAR || character == FF_QUICKFIND_LINK_CHAR);\n}\n\n/**\n * Replace the current selection with the specified text string, with the\n * inline style and entity key applied to the newly inserted text.\n */\nfunction replaceText(editorState, text, inlineStyle, entityKey) {\n  var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), text, inlineStyle, entityKey);\n  return EditorState.push(editorState, contentState, 'insert-characters');\n}\n\n/**\n * When `onBeforeInput` executes, the browser is attempting to insert a\n * character into the editor. Apply this character data to the document,\n * allowing native insertion if possible.\n *\n * Native insertion is encouraged in order to limit re-rendering and to\n * preserve spellcheck highlighting, which disappears or flashes if re-render\n * occurs on the relevant text nodes.\n */\nfunction editOnBeforeInput(editor, e) {\n  if (editor._pendingStateFromBeforeInput !== undefined) {\n    editor.update(editor._pendingStateFromBeforeInput);\n    editor._pendingStateFromBeforeInput = undefined;\n  }\n\n  var editorState = editor._latestEditorState;\n\n  var chars = e.data;\n\n  // In some cases (ex: IE ideographic space insertion) no character data\n  // is provided. There's nothing to do when this happens.\n  if (!chars) {\n    return;\n  }\n\n  // Allow the top-level component to handle the insertion manually. This is\n  // useful when triggering interesting behaviors for a character insertion,\n  // Simple examples: replacing a raw text ':)' with a smile emoji or image\n  // decorator, or setting a block to be a list item after typing '- ' at the\n  // start of the block.\n  if (editor.props.handleBeforeInput && isEventHandled(editor.props.handleBeforeInput(chars, editorState))) {\n    e.preventDefault();\n    return;\n  }\n\n  // If selection is collapsed, conditionally allow native behavior. This\n  // reduces re-renders and preserves spellcheck highlighting. If the selection\n  // is not collapsed, we will re-render.\n  var selection = editorState.getSelection();\n  var selectionStart = selection.getStartOffset();\n  var selectionEnd = selection.getEndOffset();\n  var anchorKey = selection.getAnchorKey();\n\n  if (!selection.isCollapsed()) {\n    e.preventDefault();\n\n    // If the currently selected text matches what the user is trying to\n    // replace it with, let's just update the `SelectionState`. If not, update\n    // the `ContentState` with the new text.\n    var currentlySelectedChars = editorState.getCurrentContent().getPlainText().slice(selectionStart, selectionEnd);\n    if (chars === currentlySelectedChars) {\n      editor.update(EditorState.forceSelection(editorState, selection.merge({\n        focusOffset: selectionEnd\n      })));\n    } else {\n      editor.update(replaceText(editorState, chars, editorState.getCurrentInlineStyle(), getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())));\n    }\n    return;\n  }\n\n  var newEditorState = replaceText(editorState, chars, editorState.getCurrentInlineStyle(), getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection()));\n\n  // Bunch of different cases follow where we need to prevent native insertion.\n  var mustPreventNative = false;\n  if (!mustPreventNative) {\n    // Browsers tend to insert text in weird places in the DOM when typing at\n    // the start of a leaf, so we'll handle it ourselves.\n    mustPreventNative = isSelectionAtLeafStart(editor._latestCommittedEditorState);\n  }\n  if (!mustPreventNative) {\n    // Chrome will also split up a node into two pieces if it contains a Tab\n    // char, for no explicable reason. Seemingly caused by this commit:\n    // https://chromium.googlesource.com/chromium/src/+/013ac5eaf3%5E%21/\n    var nativeSelection = global.getSelection();\n    // Selection is necessarily collapsed at this point due to earlier check.\n    if (nativeSelection.anchorNode && nativeSelection.anchorNode.nodeType === Node.TEXT_NODE) {\n      // See isTabHTMLSpanElement in chromium EditingUtilities.cpp.\n      var parentNode = nativeSelection.anchorNode.parentNode;\n      mustPreventNative = parentNode.nodeName === 'SPAN' && parentNode.firstChild.nodeType === Node.TEXT_NODE && parentNode.firstChild.nodeValue.indexOf('\\t') !== -1;\n    }\n  }\n  if (!mustPreventNative) {\n    // Check the old and new \"fingerprints\" of the current block to determine\n    // whether this insertion requires any addition or removal of text nodes,\n    // in which case we would prevent the native character insertion.\n    var originalFingerprint = BlockTree.getFingerprint(editorState.getBlockTree(anchorKey));\n    var newFingerprint = BlockTree.getFingerprint(newEditorState.getBlockTree(anchorKey));\n    mustPreventNative = originalFingerprint !== newFingerprint;\n  }\n  if (!mustPreventNative) {\n    mustPreventNative = mustPreventDefaultForCharacter(chars);\n  }\n  if (!mustPreventNative) {\n    mustPreventNative = nullthrows(newEditorState.getDirectionMap()).get(anchorKey) !== nullthrows(editorState.getDirectionMap()).get(anchorKey);\n  }\n\n  if (mustPreventNative) {\n    e.preventDefault();\n    editor.update(newEditorState);\n    return;\n  }\n\n  // We made it all the way! Let the browser do its thing and insert the char.\n  newEditorState = EditorState.set(newEditorState, {\n    nativelyRenderedContent: newEditorState.getCurrentContent()\n  });\n  // The native event is allowed to occur. To allow user onChange handlers to\n  // change the inserted text, we wait until the text is actually inserted\n  // before we actually update our state. That way when we rerender, the text\n  // we see in the DOM will already have been inserted properly.\n  editor._pendingStateFromBeforeInput = newEditorState;\n  setImmediate(function () {\n    if (editor._pendingStateFromBeforeInput !== undefined) {\n      editor.update(editor._pendingStateFromBeforeInput);\n      editor._pendingStateFromBeforeInput = undefined;\n    }\n  });\n}\n\nmodule.exports = editOnBeforeInput;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/draft-js/lib/editOnBeforeInput.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}}],"sources":{"node_modules/draft-js/lib/editOnBeforeInput.js":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnBeforeInput\n * @format\n * \n */\n\n'use strict';\n\nvar BlockTree = require('./BlockTree');\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\nvar UserAgent = require('fbjs/lib/UserAgent');\n\nvar getEntityKeyForSelection = require('./getEntityKeyForSelection');\nvar isEventHandled = require('./isEventHandled');\nvar isSelectionAtLeafStart = require('./isSelectionAtLeafStart');\nvar nullthrows = require('fbjs/lib/nullthrows');\nvar setImmediate = require('fbjs/lib/setImmediate');\n\n// When nothing is focused, Firefox regards two characters, `'` and `/`, as\n// commands that should open and focus the \"quickfind\" search bar. This should\n// *never* happen while a contenteditable is focused, but as of v28, it\n// sometimes does, even when the keypress event target is the contenteditable.\n// This breaks the input. Special case these characters to ensure that when\n// they are typed, we prevent default on the event to make sure not to\n// trigger quickfind.\nvar FF_QUICKFIND_CHAR = \"'\";\nvar FF_QUICKFIND_LINK_CHAR = '/';\nvar isFirefox = UserAgent.isBrowser('Firefox');\n\nfunction mustPreventDefaultForCharacter(character) {\n  return isFirefox && (character == FF_QUICKFIND_CHAR || character == FF_QUICKFIND_LINK_CHAR);\n}\n\n/**\n * Replace the current selection with the specified text string, with the\n * inline style and entity key applied to the newly inserted text.\n */\nfunction replaceText(editorState, text, inlineStyle, entityKey) {\n  var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), text, inlineStyle, entityKey);\n  return EditorState.push(editorState, contentState, 'insert-characters');\n}\n\n/**\n * When `onBeforeInput` executes, the browser is attempting to insert a\n * character into the editor. Apply this character data to the document,\n * allowing native insertion if possible.\n *\n * Native insertion is encouraged in order to limit re-rendering and to\n * preserve spellcheck highlighting, which disappears or flashes if re-render\n * occurs on the relevant text nodes.\n */\nfunction editOnBeforeInput(editor, e) {\n  if (editor._pendingStateFromBeforeInput !== undefined) {\n    editor.update(editor._pendingStateFromBeforeInput);\n    editor._pendingStateFromBeforeInput = undefined;\n  }\n\n  var editorState = editor._latestEditorState;\n\n  var chars = e.data;\n\n  // In some cases (ex: IE ideographic space insertion) no character data\n  // is provided. There's nothing to do when this happens.\n  if (!chars) {\n    return;\n  }\n\n  // Allow the top-level component to handle the insertion manually. This is\n  // useful when triggering interesting behaviors for a character insertion,\n  // Simple examples: replacing a raw text ':)' with a smile emoji or image\n  // decorator, or setting a block to be a list item after typing '- ' at the\n  // start of the block.\n  if (editor.props.handleBeforeInput && isEventHandled(editor.props.handleBeforeInput(chars, editorState))) {\n    e.preventDefault();\n    return;\n  }\n\n  // If selection is collapsed, conditionally allow native behavior. This\n  // reduces re-renders and preserves spellcheck highlighting. If the selection\n  // is not collapsed, we will re-render.\n  var selection = editorState.getSelection();\n  var selectionStart = selection.getStartOffset();\n  var selectionEnd = selection.getEndOffset();\n  var anchorKey = selection.getAnchorKey();\n\n  if (!selection.isCollapsed()) {\n    e.preventDefault();\n\n    // If the currently selected text matches what the user is trying to\n    // replace it with, let's just update the `SelectionState`. If not, update\n    // the `ContentState` with the new text.\n    var currentlySelectedChars = editorState.getCurrentContent().getPlainText().slice(selectionStart, selectionEnd);\n    if (chars === currentlySelectedChars) {\n      editor.update(EditorState.forceSelection(editorState, selection.merge({\n        focusOffset: selectionEnd\n      })));\n    } else {\n      editor.update(replaceText(editorState, chars, editorState.getCurrentInlineStyle(), getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())));\n    }\n    return;\n  }\n\n  var newEditorState = replaceText(editorState, chars, editorState.getCurrentInlineStyle(), getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection()));\n\n  // Bunch of different cases follow where we need to prevent native insertion.\n  var mustPreventNative = false;\n  if (!mustPreventNative) {\n    // Browsers tend to insert text in weird places in the DOM when typing at\n    // the start of a leaf, so we'll handle it ourselves.\n    mustPreventNative = isSelectionAtLeafStart(editor._latestCommittedEditorState);\n  }\n  if (!mustPreventNative) {\n    // Chrome will also split up a node into two pieces if it contains a Tab\n    // char, for no explicable reason. Seemingly caused by this commit:\n    // https://chromium.googlesource.com/chromium/src/+/013ac5eaf3%5E%21/\n    var nativeSelection = global.getSelection();\n    // Selection is necessarily collapsed at this point due to earlier check.\n    if (nativeSelection.anchorNode && nativeSelection.anchorNode.nodeType === Node.TEXT_NODE) {\n      // See isTabHTMLSpanElement in chromium EditingUtilities.cpp.\n      var parentNode = nativeSelection.anchorNode.parentNode;\n      mustPreventNative = parentNode.nodeName === 'SPAN' && parentNode.firstChild.nodeType === Node.TEXT_NODE && parentNode.firstChild.nodeValue.indexOf('\\t') !== -1;\n    }\n  }\n  if (!mustPreventNative) {\n    // Check the old and new \"fingerprints\" of the current block to determine\n    // whether this insertion requires any addition or removal of text nodes,\n    // in which case we would prevent the native character insertion.\n    var originalFingerprint = BlockTree.getFingerprint(editorState.getBlockTree(anchorKey));\n    var newFingerprint = BlockTree.getFingerprint(newEditorState.getBlockTree(anchorKey));\n    mustPreventNative = originalFingerprint !== newFingerprint;\n  }\n  if (!mustPreventNative) {\n    mustPreventNative = mustPreventDefaultForCharacter(chars);\n  }\n  if (!mustPreventNative) {\n    mustPreventNative = nullthrows(newEditorState.getDirectionMap()).get(anchorKey) !== nullthrows(editorState.getDirectionMap()).get(anchorKey);\n  }\n\n  if (mustPreventNative) {\n    e.preventDefault();\n    editor.update(newEditorState);\n    return;\n  }\n\n  // We made it all the way! Let the browser do its thing and insert the char.\n  newEditorState = EditorState.set(newEditorState, {\n    nativelyRenderedContent: newEditorState.getCurrentContent()\n  });\n  // The native event is allowed to occur. To allow user onChange handlers to\n  // change the inserted text, we wait until the text is actually inserted\n  // before we actually update our state. That way when we rerender, the text\n  // we see in the DOM will already have been inserted properly.\n  editor._pendingStateFromBeforeInput = newEditorState;\n  setImmediate(function () {\n    if (editor._pendingStateFromBeforeInput !== undefined) {\n      editor.update(editor._pendingStateFromBeforeInput);\n      editor._pendingStateFromBeforeInput = undefined;\n    }\n  });\n}\n\nmodule.exports = editOnBeforeInput;"},"lineCount":171}},"error":null,"hash":"7909df84f8b5e06459a10d8137719ad8","cacheData":{"env":{}}}