{"id":"node_modules/async-validator/es/rule/type.js","dependencies":[{"name":"/Users/eason/Desktop/micro-frontend/test/examples/react15/package.json","includedInParent":true,"mtime":1565259114444},{"name":"/Users/eason/Desktop/micro-frontend/test/examples/react15/node_modules/async-validator/package.json","includedInParent":true,"mtime":1565313461358},{"name":"../util","loc":{"line":9,"column":20},"parent":"/Users/eason/Desktop/micro-frontend/test/examples/react15/node_modules/async-validator/es/rule/type.js","resolved":"/Users/eason/Desktop/micro-frontend/test/examples/react15/node_modules/async-validator/es/util.js"},{"name":"./required","loc":{"line":13,"column":24},"parent":"/Users/eason/Desktop/micro-frontend/test/examples/react15/node_modules/async-validator/es/rule/type.js","resolved":"/Users/eason/Desktop/micro-frontend/test/examples/react15/node_modules/async-validator/es/rule/required.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _util = require('../util');\n\nvar util = _interopRequireWildcard(_util);\n\nvar _required = require('./required');\n\nvar _required2 = _interopRequireDefault(_required);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\n/* eslint max-len:0 */\n\nvar pattern = {\n  // http://emailregex.com/\n  email: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n  url: new RegExp('^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\\\S+(?::\\\\S*)?@)?(?:(?:(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[0-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,})))|localhost)(?::\\\\d{2,5})?(?:(/|\\\\?|#)[^\\\\s]*)?$', 'i'),\n  hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i\n};\n\nvar types = {\n  integer: function integer(value) {\n    return types.number(value) && parseInt(value, 10) === value;\n  },\n  float: function float(value) {\n    return types.number(value) && !types.integer(value);\n  },\n  array: function array(value) {\n    return Array.isArray(value);\n  },\n  regexp: function regexp(value) {\n    if (value instanceof RegExp) {\n      return true;\n    }\n    try {\n      return !!new RegExp(value);\n    } catch (e) {\n      return false;\n    }\n  },\n  date: function date(value) {\n    return typeof value.getTime === 'function' && typeof value.getMonth === 'function' && typeof value.getYear === 'function';\n  },\n  number: function number(value) {\n    if (isNaN(value)) {\n      return false;\n    }\n    return typeof value === 'number';\n  },\n  object: function object(value) {\n    return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && !types.array(value);\n  },\n  method: function method(value) {\n    return typeof value === 'function';\n  },\n  email: function email(value) {\n    return typeof value === 'string' && !!value.match(pattern.email) && value.length < 255;\n  },\n  url: function url(value) {\n    return typeof value === 'string' && !!value.match(pattern.url);\n  },\n  hex: function hex(value) {\n    return typeof value === 'string' && !!value.match(pattern.hex);\n  }\n};\n\n/**\n *  Rule for validating the type of a value.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param source The source object being validated.\n *  @param errors An array of errors that this rule may add\n *  validation errors to.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\nfunction type(rule, value, source, errors, options) {\n  if (rule.required && value === undefined) {\n    (0, _required2['default'])(rule, value, source, errors, options);\n    return;\n  }\n  var custom = ['integer', 'float', 'array', 'regexp', 'object', 'method', 'email', 'number', 'date', 'url', 'hex'];\n  var ruleType = rule.type;\n  if (custom.indexOf(ruleType) > -1) {\n    if (!types[ruleType](value)) {\n      errors.push(util.format(options.messages.types[ruleType], rule.fullField, rule.type));\n    }\n    // straight typeof check\n  } else if (ruleType && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== rule.type) {\n    errors.push(util.format(options.messages.types[ruleType], rule.fullField, rule.type));\n  }\n}\n\nexports['default'] = type;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/async-validator/es/rule/type.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}}],"sources":{"node_modules/async-validator/es/rule/type.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _util = require('../util');\n\nvar util = _interopRequireWildcard(_util);\n\nvar _required = require('./required');\n\nvar _required2 = _interopRequireDefault(_required);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\n/* eslint max-len:0 */\n\nvar pattern = {\n  // http://emailregex.com/\n  email: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n  url: new RegExp('^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\\\S+(?::\\\\S*)?@)?(?:(?:(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[0-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,})))|localhost)(?::\\\\d{2,5})?(?:(/|\\\\?|#)[^\\\\s]*)?$', 'i'),\n  hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i\n};\n\nvar types = {\n  integer: function integer(value) {\n    return types.number(value) && parseInt(value, 10) === value;\n  },\n  float: function float(value) {\n    return types.number(value) && !types.integer(value);\n  },\n  array: function array(value) {\n    return Array.isArray(value);\n  },\n  regexp: function regexp(value) {\n    if (value instanceof RegExp) {\n      return true;\n    }\n    try {\n      return !!new RegExp(value);\n    } catch (e) {\n      return false;\n    }\n  },\n  date: function date(value) {\n    return typeof value.getTime === 'function' && typeof value.getMonth === 'function' && typeof value.getYear === 'function';\n  },\n  number: function number(value) {\n    if (isNaN(value)) {\n      return false;\n    }\n    return typeof value === 'number';\n  },\n  object: function object(value) {\n    return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && !types.array(value);\n  },\n  method: function method(value) {\n    return typeof value === 'function';\n  },\n  email: function email(value) {\n    return typeof value === 'string' && !!value.match(pattern.email) && value.length < 255;\n  },\n  url: function url(value) {\n    return typeof value === 'string' && !!value.match(pattern.url);\n  },\n  hex: function hex(value) {\n    return typeof value === 'string' && !!value.match(pattern.hex);\n  }\n};\n\n/**\n *  Rule for validating the type of a value.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param source The source object being validated.\n *  @param errors An array of errors that this rule may add\n *  validation errors to.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\nfunction type(rule, value, source, errors, options) {\n  if (rule.required && value === undefined) {\n    (0, _required2['default'])(rule, value, source, errors, options);\n    return;\n  }\n  var custom = ['integer', 'float', 'array', 'regexp', 'object', 'method', 'email', 'number', 'date', 'url', 'hex'];\n  var ruleType = rule.type;\n  if (custom.indexOf(ruleType) > -1) {\n    if (!types[ruleType](value)) {\n      errors.push(util.format(options.messages.types[ruleType], rule.fullField, rule.type));\n    }\n    // straight typeof check\n  } else if (ruleType && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== rule.type) {\n    errors.push(util.format(options.messages.types[ruleType], rule.fullField, rule.type));\n  }\n}\n\nexports['default'] = type;"},"lineCount":104}},"error":null,"hash":"f6d2f624cc26c7c75d03358d86cc1a3c","cacheData":{"env":{}}}