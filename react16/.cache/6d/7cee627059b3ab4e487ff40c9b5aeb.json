{"id":"node_modules/async-validator/es/rule/pattern.js","dependencies":[{"name":"/Users/eason/Desktop/micro-frontend/qiankun-master/examples/react16/package.json","includedInParent":true,"mtime":1565035424000},{"name":"/Users/eason/Desktop/micro-frontend/qiankun-master/examples/react16/node_modules/async-validator/package.json","includedInParent":true,"mtime":1565254620695},{"name":"../util","loc":{"line":7,"column":20},"parent":"/Users/eason/Desktop/micro-frontend/qiankun-master/examples/react16/node_modules/async-validator/es/rule/pattern.js","resolved":"/Users/eason/Desktop/micro-frontend/qiankun-master/examples/react16/node_modules/async-validator/es/util.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _util = require('../util');\n\nvar util = _interopRequireWildcard(_util);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\n/**\n *  Rule for validating a regular expression pattern.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param source The source object being validated.\n *  @param errors An array of errors that this rule may add\n *  validation errors to.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\nfunction pattern(rule, value, source, errors, options) {\n  if (rule.pattern) {\n    if (rule.pattern instanceof RegExp) {\n      // if a RegExp instance is passed, reset `lastIndex` in case its `global`\n      // flag is accidentally set to `true`, which in a validation scenario\n      // is not necessary and the result might be misleading\n      rule.pattern.lastIndex = 0;\n      if (!rule.pattern.test(value)) {\n        errors.push(util.format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));\n      }\n    } else if (typeof rule.pattern === 'string') {\n      var _pattern = new RegExp(rule.pattern);\n      if (!_pattern.test(value)) {\n        errors.push(util.format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));\n      }\n    }\n  }\n}\n\nexports['default'] = pattern;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/async-validator/es/rule/pattern.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}}],"sources":{"node_modules/async-validator/es/rule/pattern.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _util = require('../util');\n\nvar util = _interopRequireWildcard(_util);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\n/**\n *  Rule for validating a regular expression pattern.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param source The source object being validated.\n *  @param errors An array of errors that this rule may add\n *  validation errors to.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\nfunction pattern(rule, value, source, errors, options) {\n  if (rule.pattern) {\n    if (rule.pattern instanceof RegExp) {\n      // if a RegExp instance is passed, reset `lastIndex` in case its `global`\n      // flag is accidentally set to `true`, which in a validation scenario\n      // is not necessary and the result might be misleading\n      rule.pattern.lastIndex = 0;\n      if (!rule.pattern.test(value)) {\n        errors.push(util.format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));\n      }\n    } else if (typeof rule.pattern === 'string') {\n      var _pattern = new RegExp(rule.pattern);\n      if (!_pattern.test(value)) {\n        errors.push(util.format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));\n      }\n    }\n  }\n}\n\nexports['default'] = pattern;"},"lineCount":43}},"error":null,"hash":"3bc36f224e4f0f117886412f55179aee","cacheData":{"env":{}}}