{"id":"node_modules/draft-js/lib/BlockTree.js","dependencies":[{"name":"/Users/eason/Desktop/micro-frontend/test/examples/react16/package.json","includedInParent":true,"mtime":1565772348768},{"name":"/Users/eason/Desktop/micro-frontend/test/examples/react16/node_modules/draft-js/package.json","includedInParent":true,"mtime":1565254619337},{"name":"immutable","loc":{"line":16,"column":24},"parent":"/Users/eason/Desktop/micro-frontend/test/examples/react16/node_modules/draft-js/lib/BlockTree.js","resolved":"/Users/eason/Desktop/micro-frontend/test/examples/react16/node_modules/immutable/dist/immutable.js"},{"name":"fbjs/lib/emptyFunction","loc":{"line":18,"column":28},"parent":"/Users/eason/Desktop/micro-frontend/test/examples/react16/node_modules/draft-js/lib/BlockTree.js","resolved":"/Users/eason/Desktop/micro-frontend/test/examples/react16/node_modules/fbjs/lib/emptyFunction.js"},{"name":"./findRangesImmutable","loc":{"line":19,"column":34},"parent":"/Users/eason/Desktop/micro-frontend/test/examples/react16/node_modules/draft-js/lib/BlockTree.js","resolved":"/Users/eason/Desktop/micro-frontend/test/examples/react16/node_modules/draft-js/lib/findRangesImmutable.js"}],"generated":{"js":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule BlockTree\n * @format\n * \n */\n\n'use strict';\n\nvar Immutable = require('immutable');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar findRangesImmutable = require('./findRangesImmutable');\n\nvar List = Immutable.List,\n    Repeat = Immutable.Repeat,\n    Record = Immutable.Record;\n\n\nvar returnTrue = emptyFunction.thatReturnsTrue;\n\nvar FINGERPRINT_DELIMITER = '-';\n\nvar defaultLeafRange = {\n  start: null,\n  end: null\n};\n\nvar LeafRange = Record(defaultLeafRange);\n\nvar defaultDecoratorRange = {\n  start: null,\n  end: null,\n  decoratorKey: null,\n  leaves: null\n};\n\nvar DecoratorRange = Record(defaultDecoratorRange);\n\nvar BlockTree = {\n  /**\n   * Generate a block tree for a given ContentBlock/decorator pair.\n   */\n  generate: function generate(contentState, block, decorator) {\n    var textLength = block.getLength();\n    if (!textLength) {\n      return List.of(new DecoratorRange({\n        start: 0,\n        end: 0,\n        decoratorKey: null,\n        leaves: List.of(new LeafRange({ start: 0, end: 0 }))\n      }));\n    }\n\n    var leafSets = [];\n    var decorations = decorator ? decorator.getDecorations(block, contentState) : List(Repeat(null, textLength));\n\n    var chars = block.getCharacterList();\n\n    findRangesImmutable(decorations, areEqual, returnTrue, function (start, end) {\n      leafSets.push(new DecoratorRange({\n        start: start,\n        end: end,\n        decoratorKey: decorations.get(start),\n        leaves: generateLeaves(chars.slice(start, end).toList(), start)\n      }));\n    });\n\n    return List(leafSets);\n  },\n\n  /**\n   * Create a string representation of the given tree map. This allows us\n   * to rapidly determine whether a tree has undergone a significant\n   * structural change.\n   */\n  getFingerprint: function getFingerprint(tree) {\n    return tree.map(function (leafSet) {\n      var decoratorKey = leafSet.get('decoratorKey');\n      var fingerprintString = decoratorKey !== null ? decoratorKey + '.' + (leafSet.get('end') - leafSet.get('start')) : '';\n      return '' + fingerprintString + '.' + leafSet.get('leaves').size;\n    }).join(FINGERPRINT_DELIMITER);\n  }\n};\n\n/**\n * Generate LeafRange records for a given character list.\n */\nfunction generateLeaves(characters, offset) {\n  var leaves = [];\n  var inlineStyles = characters.map(function (c) {\n    return c.getStyle();\n  }).toList();\n  findRangesImmutable(inlineStyles, areEqual, returnTrue, function (start, end) {\n    leaves.push(new LeafRange({\n      start: start + offset,\n      end: end + offset\n    }));\n  });\n  return List(leaves);\n}\n\nfunction areEqual(a, b) {\n  return a === b;\n}\n\nmodule.exports = BlockTree;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/draft-js/lib/BlockTree.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}}],"sources":{"node_modules/draft-js/lib/BlockTree.js":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule BlockTree\n * @format\n * \n */\n\n'use strict';\n\nvar Immutable = require('immutable');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar findRangesImmutable = require('./findRangesImmutable');\n\nvar List = Immutable.List,\n    Repeat = Immutable.Repeat,\n    Record = Immutable.Record;\n\n\nvar returnTrue = emptyFunction.thatReturnsTrue;\n\nvar FINGERPRINT_DELIMITER = '-';\n\nvar defaultLeafRange = {\n  start: null,\n  end: null\n};\n\nvar LeafRange = Record(defaultLeafRange);\n\nvar defaultDecoratorRange = {\n  start: null,\n  end: null,\n  decoratorKey: null,\n  leaves: null\n};\n\nvar DecoratorRange = Record(defaultDecoratorRange);\n\nvar BlockTree = {\n  /**\n   * Generate a block tree for a given ContentBlock/decorator pair.\n   */\n  generate: function generate(contentState, block, decorator) {\n    var textLength = block.getLength();\n    if (!textLength) {\n      return List.of(new DecoratorRange({\n        start: 0,\n        end: 0,\n        decoratorKey: null,\n        leaves: List.of(new LeafRange({ start: 0, end: 0 }))\n      }));\n    }\n\n    var leafSets = [];\n    var decorations = decorator ? decorator.getDecorations(block, contentState) : List(Repeat(null, textLength));\n\n    var chars = block.getCharacterList();\n\n    findRangesImmutable(decorations, areEqual, returnTrue, function (start, end) {\n      leafSets.push(new DecoratorRange({\n        start: start,\n        end: end,\n        decoratorKey: decorations.get(start),\n        leaves: generateLeaves(chars.slice(start, end).toList(), start)\n      }));\n    });\n\n    return List(leafSets);\n  },\n\n  /**\n   * Create a string representation of the given tree map. This allows us\n   * to rapidly determine whether a tree has undergone a significant\n   * structural change.\n   */\n  getFingerprint: function getFingerprint(tree) {\n    return tree.map(function (leafSet) {\n      var decoratorKey = leafSet.get('decoratorKey');\n      var fingerprintString = decoratorKey !== null ? decoratorKey + '.' + (leafSet.get('end') - leafSet.get('start')) : '';\n      return '' + fingerprintString + '.' + leafSet.get('leaves').size;\n    }).join(FINGERPRINT_DELIMITER);\n  }\n};\n\n/**\n * Generate LeafRange records for a given character list.\n */\nfunction generateLeaves(characters, offset) {\n  var leaves = [];\n  var inlineStyles = characters.map(function (c) {\n    return c.getStyle();\n  }).toList();\n  findRangesImmutable(inlineStyles, areEqual, returnTrue, function (start, end) {\n    leaves.push(new LeafRange({\n      start: start + offset,\n      end: end + offset\n    }));\n  });\n  return List(leaves);\n}\n\nfunction areEqual(a, b) {\n  return a === b;\n}\n\nmodule.exports = BlockTree;"},"lineCount":113}},"error":null,"hash":"bfd7f2ed9625fadcbc34777763a55015","cacheData":{"env":{}}}